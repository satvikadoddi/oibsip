import java.util.Scanner;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class ATM {
    private static Scanner scanner = new Scanner(System.in);
    private static User currentUser;

    public static void main(String[] args) {
        // Initialize users (you can use a database or file for user data)
        UserDatabase.initialize();

        // Prompt for user ID and PIN
        System.out.println("Welcome to the ATM!");
        System.out.print("Enter your user ID: ");
        String userId = scanner.nextLine();
        System.out.print("Enter your PIN: ");
        String pin = scanner.nextLine();

        // Authenticate user
        currentUser = UserDatabase.authenticateUser(userId, pin);
        if (currentUser == null) {
            System.out.println("Invalid user ID or PIN. Exiting...");
            return;
        }

        // Display ATM options
        while (true) {
            displayOptions();
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    displayTransactionHistory();
                    break;
                case 2:
                    withdraw();
                    break;
                case 3:
                    deposit();
                    break;
                case 4:
                    transfer();
                    break;
                case 5:
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void displayOptions() {
        System.out.println("\nATM Options:");
        System.out.println("1. View Transaction History");
        System.out.println("2. Withdraw");
        System.out.println("3. Deposit");
        System.out.println("4. Transfer");
        System.out.println("5. Quit");
        System.out.print("Enter your choice: ");
    }

    private static void displayTransactionHistory() {
        System.out.println("\nTransaction History:");
        for (Transaction transaction : currentUser.getTransactionHistory()) {
            System.out.println(transaction);
        }
    }

    private static void withdraw() {
        System.out.print("Enter amount to withdraw: ");
        double amount = scanner.nextDouble();
        if (amount > currentUser.getBalance()) {
            System.out.println("Insufficient funds.");
            return;
        }
        currentUser.setBalance(currentUser.getBalance() - amount);
        currentUser.addTransaction(new Transaction("Withdrawal", -amount));
        System.out.println("Withdrawal successful.");
    }

    private static void deposit() {
        System.out.print("Enter amount to deposit: ");
        double amount = scanner.nextDouble();
        currentUser.setBalance(currentUser.getBalance() + amount);
        currentUser.addTransaction(new Transaction("Deposit", amount));
        System.out.println("Deposit successful.");
    }

    private static void transfer() {
        System.out.print("Enter recipient's user ID: ");
        String recipientId = scanner.nextLine();
        System.out.print("Enter amount to transfer: ");
        double amount = scanner.nextDouble();
        if (amount > currentUser.getBalance()) {
            System.out.println("Insufficient funds.");
            return;
        }
        User recipient = UserDatabase.getUserById(recipientId);
        if (recipient == null) {
            System.out.println("Recipient user ID not found.");
            return;
        }
        currentUser.setBalance(currentUser.getBalance() - amount);
        recipient.setBalance(recipient.getBalance() + amount);
        currentUser.addTransaction(new Transaction("Transfer to " + recipientId, -amount));
        recipient.addTransaction(new Transaction("Transfer from " + currentUser.getUserId(), amount));
        System.out.println("Transfer successful.");
    }
}

class User {
    private String userId;
    private String pin;
    private double balance;
    private List<Transaction> transactionHistory;

    public User(String userId, String pin, double balance) {
        this.userId = userId;
        this.pin = pin;
        this.balance = balance;
        this.transactionHistory = new ArrayList<>();
    }

    // Getters and setters for user attributes

    public List<Transaction> getTransactionHistory() {
        return transactionHistory;
    }

    public String getPin() {
        return pin;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    public String getUserId() {
        return userId;
    }

    public void addTransaction(Transaction transaction) {
        transactionHistory.add(transaction);
    }
}

class Transaction {
    private String type;
    private double amount;
    private Date date;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
        this.date = new Date();
    }

    // Getters for transaction attributes

    @Override
    public String toString() {
        return "Type: " + type + ", Amount: " + amount + ", Date: " + date;
    }
}

class UserDatabase {
    private static Map<String, User> users = new HashMap<>();

    public static void initialize() {
        // Initialize users and add them to the database
        users.put("user1", new User("user1", "1234", 1000));
        users.put("user2", new User("user2", "5678", 500));
    }

    public static User authenticateUser(String userId, String pin) {
        if (users.containsKey(userId)) {
            User user = users.get(userId);
            if (user.getPin().equals(pin)) {
                return user;
            }
        }
        return null;
    }

    public static User getUserById(String userId) {
        return users.get(userId);
    }
}
